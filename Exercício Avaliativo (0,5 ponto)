#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>
#include <time.h>

#define MAX_USUARIOS 1000
#define MAX_NOME 100
#define MAX_EMAIL 100
#define MAX_ENDERECO 100

typedef struct {
    int id;
    char nome[MAX_NOME];
    char email[MAX_EMAIL];
    char sexo[MAX_NOME];
    char endereco[MAX_ENDERECO];
    double altura;
    int vacina;
} Usuario;

Usuario usuarios[MAX_USUARIOS];
int numUsuarios = 0;

int gerarId() {
    srand(time(NULL));
    return rand() % 10000 + 1;
}

bool validarEmail(char *email) {
    int i;
    int tamanho = strlen(email);
    bool encontrado = false;

    for (i = 0; i < tamanho; i++) {
        if (email[i] == '@') {
            encontrado = true;
            break;
        }
    }
    return encontrado;
}

bool validarSexo(char *sexo) {
    if (strcmp(sexo, "feminino") == 0 || strcmp(sexo, "masculino") == 0 || strcmp(sexo, "Indiferente") == 0) {
        return true;
    }
    return false;
}

bool validarAltura(double altura) {
    if (altura >= 1.0 && altura <= 2.0) {
        return true;
    }
    return false;
}

void adicionarUsuario() {
    Usuario usuario;

    usuario.id = gerarId();

    printf("Informe o nome completo do usuário: ");
    scanf(" %[^\n]", usuario.nome);

    printf("Informe o email do usuário: ");
    scanf(" %[^\n]", usuario.email);

    while (!validarEmail(usuario.email)) {
        printf("Email inválido. Informe novamente: ");
        scanf(" %[^\n]", usuario.email);
    }

    printf("Informe o sexo do usuário: ");
    scanf(" %[^\n]", usuario.sexo);

    while (!validarSexo(usuario.sexo)) {
        printf("Sexo inválido. Informe novamente: ");
        scanf(" %[^\n]", usuario.sexo);
    }

    printf("Informe o endereço do usuário: ");
    scanf(" %[^\n]", usuario.endereco);

    printf("Informe a altura do usuário (em metros): ");
    scanf("%lf", &usuario.altura);

    while (!validarAltura(usuario.altura)) {
        printf("Altura inválida. Informe novamente: ");
        scanf("%lf", &usuario.altura);
    }

    printf("O usuário foi vacinado? (1 - Sim, 0 - Não): ");
    scanf("%d", &usuario.vacina);

    usuarios[numUsuarios] = usuario;
    numUsuarios++;

    printf("Usuário adicionado com sucesso.\n");
}

void editarUsuario() {
    int id;
    int i;
    bool encontrado = false;

    printf("Informe o ID do usuário a ser editado: ");
    scanf("%d", &id);

    for (i = 0; i < numUsuarios; i++) {
        if (usuarios[i].id == id) {
            Usuario usuario = usuarios[i];

            printf("Usuário encontrado:\n");
            printf("ID: %d\n", usuario.id);
            printf("Nome: %s\n", usuario.nome);
            printf("Email: %s\n", usuario.email);
            printf("Sexo: %s\n", usuario.sexo);
            printf("Endereço: %s\n", usuario.endereco);
            printf("Altura: %.2lf\n", usuario.altura);
            printf("Vacinado: %s\n", usuario.vacina ? "Sim" : "Não");

            printf("Informe o novo nome do usuário: ");
            scanf(" %[^\n]", usuario.nome);

            printf("Informe o novo email do usuário: ");
            scanf(" %[^\n]", usuario.email);

            while (!validarEmail(usuario.email)) {
                printf("Email inválido. Informe novamente: ");
                scanf(" %[^\n]", usuario.email);
            }

            printf("Informe o novo sexo do usuário: ");
            scanf(" %[^\n]", usuario.sexo);

            while (!validarSexo(usuario.sexo)) {
                printf("Sexo inválido. Informe novamente: ");
                scanf(" %[^\n]", usuario.sexo);
            }

            printf("Informe o novo endereço do usuário: ");
            scanf(" %[^\n]", usuario.endereco);

            printf("Informe a nova altura do usuário (em metros): ");
            scanf("%lf", &usuario.altura);

            while (!validarAltura(usuario.altura)) {
                printf("Altura inválida. Informe novamente: ");
                scanf("%lf", &usuario.altura);
            }

            printf("O usuário foi vacinado? (1 - Sim, 0 - Não): ");
            scanf("%d", &usuario.vacina);

            usuarios[i] = usuario;

            printf("Usuário editado com sucesso.\n");
            encontrado = true;
            break;
        }
    }

    if (!encontrado) {
        printf("Usuário não encontrado.\n");
    }
}

void excluirUsuario() {
    int id;
    int i, j;
    bool encontrado = false;

    printf("Informe o ID do usuário a ser excluído: ");
    scanf("%d", &id);

    for (i = 0; i < numUsuarios; i++) {
        if (usuarios[i].id == id) {
            for (j = i; j < numUsuarios - 1; j++) {
                usuarios[j] = usuarios[j+1];
            }
            numUsuarios--;
            printf("Usuário excluído com sucesso.\n");
            encontrado = true;
            break;
        }
    }

    if (!encontrado) {
        printf("Usuário não encontrado.\n");
    }
}

void buscarUsuario() {
    char email[MAX_EMAIL];
    int i;
    bool encontrado = false;

    printf("Informe o email do usuário a ser buscado: ");
    scanf(" %[^\n]", email);

    for (i = 0; i < numUsuarios; i++) {
        if (strcmp(usuarios[i].email, email) == 0) {
            Usuario usuario = usuarios[i];

            printf("Usuário encontrado:\n");
            printf("ID: %d\n", usuario.id);
            printf("Nome: %s\n", usuario.nome);
            printf("Email: %s\n", usuario.email);
            printf("Sexo: %s\n", usuario.sexo);
            printf("Endereço: %s\n", usuario.endereco);
            printf("Altura: %.2lf\n", usuario.altura);
            printf("Vacinado: %s\n", usuario.vacina ? "Sim" : "Não");

            encontrado = true;
            break;
        }
    }

    if (!encontrado) {
        printf("Usuário não encontrado.\n");
    }
}

void imprimirUsuarios() {
    int i;

    if (numUsuarios == 0) {
        printf("Nenhum usuário cadastrado.\n");
        return;
    }

    printf("Lista de usuários cadastrados:\n");
    for (i = 0; i < numUsuarios; i++) {
        Usuario usuario = usuarios[i];

        printf("ID: %d\n", usuario.id);
        printf("Nome: %s\n", usuario.nome);
        printf("Email: %s\n", usuario.email);
        printf("Sexo: %s\n", usuario.sexo);
        printf("Endereço: %s\n", usuario.endereco);
        printf("Altura: %.2lf\n", usuario.altura);
        printf("Vacinado: %s\n", usuario.vacina ? "Sim" : "Não");
        printf("\n");
    }
}

void fazerBackup() {
    FILE *arquivo;
    int i;

    arquivo = fopen("backup.txt", "w");

    if (arquivo == NULL) {
        printf("Erro ao criar o arquivo de backup.\n");
        return;
    }

    for (i = 0; i < numUsuarios; i++) {
        Usuario usuario = usuarios[i];

        fprintf(arquivo, "ID: %d\n", usuario.id);
        fprintf(arquivo, "Nome: %s\n", usuario.nome);
        fprintf(arquivo, "Email: %s\n", usuario.email);
        fprintf(arquivo, "Sexo: %s\n", usuario.sexo);
        fprintf(arquivo, "Endereço: %s\n", usuario.endereco);
        fprintf(arquivo, "Altura: %.2lf\n", usuario.altura);
        fprintf(arquivo, "Vacinado: %s\n", usuario.vacina ? "Sim" : "Não");
        fprintf(arquivo, "\n");
    }
    fclose(arquivo);
    printf("Backup dos usuários cadastrados realizado com sucesso.\n");
}

void restaurarBackup() {
    FILE *arquivo;
    char linha[MAX_NOME];

    arquivo = fopen("backup.txt", "r");

    if (arquivo == NULL) {
        printf("Arquivo de backup não encontrado.\n");
        return;
    }
    numUsuarios = 0;

    while (fgets(linha, sizeof(linha), arquivo) != NULL) {
        Usuario usuario;

        if (strstr(linha, "ID:") != NULL) {
            sscanf(linha, "ID: %d", &usuario.id);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Nome: %[^\n]", usuario.nome);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Email: %[^\n]", usuario.email);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Sexo: %[^\n]", usuario.sexo);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Endereço: %[^\n]", usuario.endereco);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Altura: %lf", &usuario.altura);
            fgets(linha, sizeof(linha), arquivo);
            sscanf(linha, "Vacinado: %[^\n]", linha);

            if (strcmp(linha, "Sim") == 0) {
                usuario.vacina = 1;
            } else {
                usuario.vacina = 0;
            }
            usuarios[numUsuarios] = usuario;
            numUsuarios++;
        }
    }
    fclose(arquivo);
    printf("Dados restaurados do backup com sucesso.\n");
}

void exibirMenu() {
    char opcao;

    while (true) {
        printf("\nMenu de opções:\n");
        printf("1. Adicionar usuário\n");
        printf("2. Editar usuário\n");
        printf("3. Excluir usuário\n");
        printf("4. Buscar usuário pelo email\n");
        printf("5. Imprimir todos os usuários cadastrados\n");
        printf("6. Fazer backup dos usuários cadastrados\n");
        printf("7. Restaurar dados do backup\n");
        printf("8. Sair\n");
        printf("Escolha uma opção: ");
        scanf(" %c", &opcao);

        switch (opcao) {
            case '1':
                adicionarUsuario();
                break;
            case '2':
                editarUsuario();
                break;
            case '3':
                excluirUsuario();
                break;
            case '4':
                buscarUsuario();
                break;
            case '5':
                imprimirUsuarios();
                break;
            case '6':
                fazerBackup();
                break;
            case '7':
                restaurarBackup();
                break;
            case '8':
                printf("Saindo do programa...\n");
                return;
            default:
                printf("Opção inválida. Digite novamente.\n");
        }
    }
}
int main() {
    exibirMenu();
    return 0;
}
